Library: community.livecode.rabit.universalbutton

Type: widget

Summary: Button and toggle widget.

Description:
This widget can be used as a toggle or as a simple button. It has a default
state and a "highlighted" state. It can display an SVG icon or text only or
both. Every corner can be rounded separately.

author: Ralf Bitter

version: 1.4.0

Name: borderColor

Type: property

Syntax: get the borderColor of <widget>

Syntax: set the borderColor of <widget> to <color>

Summary: Determines the color of the button border.

Example: set the borderColor of widget "Universal Button" to "211,211,211"

Description: Use the <borderColor> property to control the color of the button border.

Name: backgroundColor

Type: property

Syntax: get the backgroundColor of <widget>

Syntax: set the backgroundColor of <widget> to <pColor>

Summary: Determines the color of the button when not highlighted.

Example: set the backgroundColor of widget "Universal Button" to "211,211,211"

Description:
Use the <backgroundColor> property to control the color of the button when not
hilited.

Name: hiliteColor

Type: property

Syntax: get the hiliteColor of <widget>

Syntax: set the hiliteColor of <widget> to <color>

Summary: Determines the color of the button when hilited.

Example: set the hiliteColor of widget "Universal Button" to "211,211,211"

Description:
Use the <hiliteColor> property to control the color of the button
when hilited.

Name: foregroundColor

Type: property

Syntax: get the foregroundColor of <widget>

Syntax: set the foregroundColor of <widget> to <color>

Summary: Determines the color of the button label when not hilited.

Example: set the foregroundColor of widget "Universal Button" to "211,211,211"

Description:
Use the <foregroundColor> property to control the color of the button label
(icon and text) when not hilited.

Name: ubGeometryChanged

Type: message

Syntax: ubGeometryChanged

Summary: Sent when the widget geometry changed.

Description:
The ubGeometryChanged message is sent to the widget's script object
when the widget geometry changed.

Name: ubResizeToFormattedWidth

Type: LC handler

Syntax: ubResizeToFormattedWidth <pDeviation>

Summary:
The ubResizeToFormattedWidth handler is used
to adjust the width of the button to the formatted width.

Example:
command ubSwitchLabel
   local tTopRight, tLabel

   put the topRight of  widget 1  into tTopRight
   put the buttonText of widget 1 into tLabel

   set the iconSizeRatio of widget 1 to 0.55

   if tLabel = "next card" then
      set the buttonText of widget 1 to "up"
   else
      set the buttonText of widget 1 to "next card"
   end if

   dispatch "ubResizeToFormattedWidth" to widget 1
   set the topRight of widget 1 to tTopRight

   if the buttonText of widget 1 = "next card" then
      set the iconSizeRatio of widget 1 to 0.55
   else
      set the iconSizeRatio of widget 1 to 1
   end if
end ubSwitchLabel

Description:
Use the ubResizeToFormattedWidth handler to adjust the width
of the button right after changing the button label.
Add the ubResizeToFormattedWidth default handler to the widget's
script object and call it in your script.
pDeviation is an integer to increase or decrease the formatted
width of the button.

Name: labelIcon

Type: property

Syntax: set the labelIcon of <widget> to <pIconName>
get the labelIcon of <widget>

Summary: A predefined SVG icon path name.

Parameters: 

pIconName: The name of the icon to display.

Example: set the labelIcon of widget "Universal Button" to "thumbs up"

Description:
Use the <labelIcon> property to set the icon of the widget to one of the
predefined graphics provided by the "IconSVG" library.

You can get a list of available predefined path names by running
`put iconNames()` in the Message Box.



Name: labelIconPath

Type: property

Syntax: set the labelIconPath of <widget> to <pPath>
get the labelIconPath of <widget>

Summary: Determines the SVG path of the button icon.

Parameters: 

pPath: The SVG path of the icon.

Example: set the labelIconPath of widget "My Icon Button" to "M 254.54492 764.48438 L 254.54492 822.05859 L 342.42383 822.05859 L 342.42383 764.48438 L 254.54492 764.48438 z"

Description: Use the `labelIconPath` property to set the SVG path of the widget icon.




Name: buttonText

Type: property

Syntax: set the buttonText of <widget> to <pText>
get the buttonText of <widget>

Summary: Determines the label text of the button.

Parameters: 

pText: The label text.

Example: set the buttonText of widget "Universal Button" to "Button Label"

Description:
Use the `buttonText` property to change or get the button label text. This
string can contain line feed characters. The widget wraps text automatically if
the lines of the label text do not fit.



Name: btnCornerRadius

Type: property

Syntax: set the btnCornerRadius of <widget> to <pNum>
get the btnCornerRadius of <widget>

Summary: Determines the corner radius of the button.

Parameters: 

pNum: The radius.

Example: set the btnCornerRadius of widget "Universal Button" to 10

Description:
Use the `btnCornerRadius` property to change or get the radius
of the rounded corners if rounding of the particular corner(s) is enabled.



Name: textAlign

Type: property

Syntax: set the textAlign of <widget> to <pAlign>
get the textAlign of <widget>

Summary: The horizontal text alignment of the button label.

Value:
"left"
"center"
"right"

Example: set the textAlign of widget "Universal Button" to "center"

Description:
Use the <textAlign> property to change the horizontal text alignment of the
button label.



Name: ubFormattedWidth

Type: property

Syntax: get the ubFormattedWidth of <widget>

Summary: Get the width of the button label or icon or both.

Example: set the width of widget 1 to (the ubFormattedWidth of widget 1)

Description:
Use the <ubFormattedWidth> property to trim the width of the widget
to the width of the label or the icon or both in case the icon type
is "icon and text". The calculation respects the settings of the
icon size ratio and the margin ratio. The width of the label text is
calculated by checking both, the button text and the button toggle text.



Name: marginRatio

Type: property

Syntax: set the marginRatio of <widget> to <pNum>
get the marginRatio of <widget>

Summary: Manipulates the horizontal margins of the button label and the icon.

Parameters: 

pNum: The ratio as a floating point number.

Example: set the marginRatio of widget "My Icon Button" to 0.8

Description:
Use the <marginRatio> property to change the horizontal margins of
the button label. This horizontal margin is applied to the icon too, but only
if icon gravity is "left" or "right".
If label style is "icon" and gravity is "left" or "right" you need to choose
label style "icon and text" once, adjust the margin ratio, then switch back
to label style "icon".

Valid ratio values range from 0.5 to 1.



Name: isToggle

Type: property

Syntax: set the isToggle of <widget> to {true|false}
get the isToggle of <widget>

Summary: Determines if the button acts as a toggle.

Example: set the isToggle of widget "My Toggle" to true

Description: Use the `isToggle` property to switch between a simple button and a toggle.




Name: highlightedLabelIconPath

Type: property

Syntax: set the highlightedLabelIconPath of <widget> to <pPath>
get the highlightedLabelIconPath of <widget>

Summary: Determines the SVG path of the button icon.

Parameters: 

pPath: The SVG path of the icon.

Example: set the highlightedLabelIconPath of widget "My Icon Button" to "M 254.54492 764.48438 L 254.54492 822.05859 L 342.42383 822.05859 L 342.42383 764.48438 L 254.54492 764.48438 z"

Description:
Use the `highlightedLabelIconPath` property to set the SVG path of the widget
icon in highlighted mode.



Name: roundTR

Type: property

Syntax: set the roundTR of <widget> to {true|false}
get the roundTR of <widget>

Summary: Enables/disables corner rounding.

Example: set the roundTR of widget "Universal Button" to false

Description: Use the `roundTR` property to toggle the rounding of the top right corner.




Name: roundBL

Type: property

Syntax: set the roundBL of <widget> to {true|false}
get the roundBL of <widget>

Summary: Enables/disables corner rounding.

Example: set the roundBL of widget "Universal Button" to false

Description: Use the `roundBL` property to toggle the rounding of the bottom left corner.




Name: btnIconGravity

Type: property

Syntax: set the btnIconGravity of <widget> to <pGravity>
get the btnIconGravity of <widget>

Summary: Specifies wether the button icon is placed independently of the label.

Parameters: 

pGravity: The position of the icon.

Example: set the btnIconGravity of widget "Universal Button" to "topLeft"

Description:
Use the `btnIconGravity` property to switch between icon positions `left`, `top`,
`right`, `bottom`, `topLeft`, `topRight`, `bottomLeft` and `bottomRight`.



Name: opaque

Type: property

Syntax: set the opaque of <widget> to {true | false}
get the opaque of <widget>

Summary: Whether the background of the unhighlighted widget is filled.

Example: set the opaque of widget "Universal Button" to false

Description:
If the <opaque> property is `true`, the unhighlighted background of the button
is filled with the <buttonColor> or <highlightedButtonColor> respectively.
If it is `false` the background is transparent.



Name: executeWidgetMouseHandlers

Type: property

Syntax: set the executeWidgetMouseHandlers of <widget> to {true | false}
get the executeWidgetMouseHandlers of <widget>

Summary: Whether the widget's mouse handlers are executed.

Example: set the executeWidgetMouseHandlers of widget "Universal Button" to false

Description:
If the <executeWidgetMouseHandlers> property is `false`, widget mouse handlers
are not executed.



Name: highlightedButtonLabelColor

Type: property

Syntax: set the highlightedButtonLabelColor of <widget> to <pColor>
get the highlightedButtonLabelColor of <widget>

Summary: Determines the color of the button label when highlighted.

Example: set the highlightedButtonLabelColor of widget "Universal Button" to "211,211,211"

Description:
Use the <highlightedButtonLabelColor> property to control the color of the
button label (icon and text) when highlighted.



Name: roundTL

Type: property

Syntax: set the roundTL of <widget> to {true|false}
get the roundTL of <widget>

Summary: Enables/disables corner rounding.

Example: set the roundTL of widget "Universal Button" to false

Description: Use the `roundTL` property to toggle the rounding of the top left corner.




Name: roundBR

Type: property

Syntax: set the roundBR of <widget> to {true|false}
get the roundBR of <widget>

Summary: Enables/disables corner rounding.

Example: set the roundBR of widget "Universal Button" to false

Description: Use the `roundBR` property to toggle the rounding of the bottom right corner.




Name: isHighlighted

Type: property

Syntax: set the isHighlighted of <widget> to {true|false}
get the isHighlighted of <widget>

Summary: `true` if the button is highlighted; `false` otherwise.

Example: set the isHighlighted of widget "Universal Button" to true

Description:
Use the `isHighlighted` property to test or control whether the button is
displayed as highlighted or not.



Name: iconSizeRatio

Type: property

Syntax: set the iconSizeRatio of <widget> to <pNum>
get the iconSizeRatio of <widget>

Summary: Manipulates the icon size.

Parameters: 

pNum: The ratio as a floating point number.

Example: set the iconSizeRatio of widget "My Icon Button" to 0.5

Description:
Use the <iconSizeRatio> property to change the size of the button icon.
Valid ratio values range from 0.1 to 1.



Name: buttonToggleText

Type: property

Syntax: set the buttonToggleText of <widget> to <pText>
get the buttonToggleText of <widget>

Summary: Determines the label text of the button in highlighted mode.

Parameters: 

pText: The label text.

Example: set the buttonToggleText of widget "Universal Button" to "Button Highlighted Label"

Description:
Use the `buttonToggleText` property to change or get the button label text.
This string can contain line feed characters. The widget wraps text
automatically if the lines of the label text do not fit.



Name: btnBorderWidth

Type: property

Syntax: set the btnBorderWidth of <widget> to <pNum>
get the btnBorderWidth of <widget>

Summary: Determines the border width of the button.

Parameters: 

pNum: The width.

Example: set the btnBorderWidth of widget "Universal Button" to 2

Description:
Use the `btnBorderWidth` property to change or get the width
of the button border.



Name: highlightedLabelIcon

Type: property

Syntax: set the highlightedLabelIcon of <widget> to <pIconName>
get the highlightedLabelIcon of <widget>

Summary: A predefined SVG icon path name.

Parameters: 

pIconName: The name of the icon to display.

Example:
set the highlightedLabelIcon of widget "Universal Button" to
"thumbs up"

Description:
Use the <highlightedLabelIcon> property to set the icon of the widget to one
of the predefined graphics provided by the "IconSVG" library.

You can get a list of available predefined path names by running
`put iconNames()` in the Message Box.



Name: labelStyle

Type: property

Syntax: set the labelStyle of <widget> to <pStyle>
get the labelStyle of <widget>

Summary: Determines the label style of the button.

Parameters: 

pStyle: The style as string.

Example: set the labelStyle of widget "Universal Button" to "icon and text"

Description:
Use the `labelStyle` property to switch between label styles `text`, `icon` and
`icon and text`.



Name: showBtnBorder

Type: property

Syntax: set the showBtnBorder of <widget> to {true|false}
get the showBtnBorder of <widget>

Summary: Shows/hides a border.

Example: set the showBtnBorder of widget "Universal Button" to true

Description: Use the `showBtnBorder` property to toggle the button border.




Name: highlightedOpaque

Type: property

Syntax: set the opaque of <widget> to {true | false}
get the opaque of <widget>

Summary: Whether the background of the unhighlighted widget is filled.

Example: set the opaque of widget "Universal Button" to false

Description:
If the <opaque> property is `true`, the unhighlighted background of the button
is filled with the <buttonColor> or <highlightedButtonColor> respectively.
If it is `false` the background is transparent.



